# -*- coding: utf-8 -*-
"""testLotUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J3BwQLohyPhmdAn0l736731C_LQuBj-i
"""

# -*- coding: utf-8 -*-
"""parkinglot_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SuWeBw01GugMXEvFZLR1YQtq2otYF8E5
"""



import sys
import datetime
import matplotlib.pyplot as plt
from parking_space_counter import detect
from PyQt5.QtWidgets import QLabel
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtCore import QThread
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

from gui import MainWindow
import parking_space_counter.detect as detect


class Car:
    def __init__(self, licensePlate):
        self.licensePlate = licensePlate
        self.isPark = False
        self.inpark = "has not park yet"
        self.outpark = "has not leave yet"
        self.inspace = "not in space yet"
        self.outspace = "not out space yet"

    def park(self):
        if not self.isPark:
            self.inspace = datetime.datetime.now().replace(microsecond=0)
            self.isPark = True
            print(f"{self.inspace} 車牌號碼為 {self.licensePlate} 的車輛現已停放。")
        else:
            print("此車輛已經停放。")

    def leave(self):
        if self.isPark:
            self.isPark = False
            self.outspace = datetime.datetime.now().replace(microsecond=0)
            print(f"{self.outspace} 車牌號碼為 {self.licensePlate} 的車輛已開始離開停車位。")
        else:
            print("此車輛並未停放。")

    def __str__(self):
        return f"車牌號碼: {self.licensePlate}\n entertime: {self.inpark}\n enterspace: {self.inspace}\n leavespace: {self.outspace}\n leavetime: {self.outpark}\n"

class ParkingLot:
    def __init__(self, capacity):
        self.capacity = capacity
        self.availableSpaces = capacity
        self.parkingSpaces = [ParkingSpace(spaceId) for spaceId in range(1, capacity + 1)]
        self.parkedCars = []

    def enterParkingLot(self, license):
        if self.availableSpaces > 0:
            self.availableSpaces -= 1
            now = datetime.datetime.now().replace(microsecond=0)
            tempcar = Car(license)
            tempcar.inpark = now
            self.parkedCars.append(tempcar)
            print(f"{now} 車牌號碼為 {license} 的車輛進入停車場。")
            print(f"剩餘車位數：{self.availableSpaces}\n")
        else:
            print("停車場已滿，無法進入。")

    def leaveParkingLot(self, licensePlate):
        for car in self.parkedCars:
            if car.licensePlate == licensePlate:
                self.availableSpaces += 1
                if car.isPark:
                    car.leave()
                now = datetime.datetime.now().replace(microsecond=0)
                car.outpark = now
                print(f"{now} 車牌號碼為 {car.licensePlate} 的車輛離開停車場。")
                return car
        print("此車輛並未停放在此停車場。")
        return None

    def found(self, license):
        for car in self.parkedCars:
            if car.licensePlate == license:
                return car
        print("not found")
        return None

    def parkCar(self, licensePlate):
        for space in self.parkingSpaces:
            if not space.occupied:
                car = self.found(licensePlate)
                space.occupy(car)
                print(f"車牌號碼為 {licensePlate} 的車輛現已停放在停車位 {space.spaceId}。\n")
                return car

    def leaveCar(self, licensePlate):
        for space in self.parkingSpaces:
            if space.occupied and space.carLicensePlate == licensePlate:
                self.availableSpaces -= 1
                car = self.found(licensePlate)
                space.leave(car)
                return car
        print("此車輛並未停放在此停車場。")
        return None

    def getAvailableSpaces(self):
        return self.availableSpaces

    def getParkedCars(self):
        return [space.carLicensePlate for space in self.parkingSpaces if space.occupied]

    def getOccupiedSpaces(self):
        return [space.spaceId for space in self.parkingSpaces if space.occupied]

    def getCarBySpaceId(self, spaceId):
        for space in self.parkingSpaces:
            if space.spaceId == spaceId and space.occupied:
                return space.carLicensePlate
        return None

    def getSpaceIdByCar(self, licensePlate):
        for space in self.parkingSpaces:
            if space.occupied and space.carLicensePlate == licensePlate:
                return space.spaceId
        return None

class ParkingSpace:
    def __init__(self, spaceId):
        self.spaceId = spaceId
        self.occupied = False
        self.carLicensePlate = None

    def occupy(self, car):
        self.occupied = True
        self.carLicensePlate = car.licensePlate
        print(f"車牌號碼為 {self.carLicensePlate} 的車輛已進入停車位 {self.spaceId}。")
        car.park()

    def leave(self, car):
        if self.carLicensePlate:
            car.leave()
            print(f"車牌號碼為 {self.carLicensePlate} 的車輛已離開停車位 {self.spaceId}。")
            self.carLicensePlate = None
            self.occupied = False
        else:
            print(f"停車位 {self.spaceId} 為空。")

class ParkingThread(QtCore.QThread):
    """
    自定義的執行緒類，用於在後台運行 detect.getSpace(spots, cap, window)
    """
    def __init__(self, spots, cap, window):
        super().__init__()
        self.spots = spots
        self.cap = cap
        self.window = window

    def run(self):
        detect.getSpace(self.spots, self.cap, self.window)

if __name__ == "__main__":
    spots, cap = detect.init()
    #detect.getSpace(spots, cap)
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow(ParkingLot, spots)
    window.show()
    window.park_video.play()
    #window.leave_car("ABC123","17")
    """
    detect.getSpace(spots, cap) -> 這個是用來測試的函數
    TODO: 需要讓他在park_video.play()執行時同步執行
    """
    # 創建並啟動執行緒
    thread = ParkingThread(spots, cap, window)
    thread.start()

    sys.exit(app.exec_())
